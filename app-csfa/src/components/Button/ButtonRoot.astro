---
import type { HTMLAttributes } from 'astro/types';
    
    interface Props extends HTMLAttributes<"button">{
        type?: "button" | "submit";
        size?: "sm" | "md" | "lg";
        isfilled?: boolean;
        theme?:
            | "primary"
            | "danger"
            | "info"
            | "light"
            | "dark";
        classes?: string; 
     }

    const{
        type = "button",
        size = "md",
        isfilled,
        theme = "light",
        classes,
        ...rest
    } = Astro.props
    
    const background = `var(--${theme})`;
    const foreground = theme === "light" ? "var(--primary)" : "var(--light)"

---



<button 
    {type} 
    data-size={size} 
    class:list={[classes, {filled: isfilled}]}
    {...rest}    
> 
    <slot />
</button>



<style define:vars={{
    foreground,
    background,
}}>

    :where(button){
        /* resets */
        font: inherit;
        cursor: pointer;
        
        /* variaveis */
        --bkg: var(--background);
        --color: var(--foreground);

        /* default styles */
        display: flex;
        gap: 0.5em;
        align-items: center;
        background-color: var(--light);
        color: var(--bkg);
        border: 0.2em solid var(--bkg);
        padding: 0.4em 1.2em;
        transition: box-shadow .2s cubic-bezier(0.075, 0.82, 0.165, 1), 
            opacity .2s ease-in-out, 
            scale .2s ease-in-out, 
        ;
    }

    :where(button.filled){
        background-color: var(--bkg);
        color: var(--foreground);
        border: none;
    }
    button:hover{
        opacity: 0.8;
        scale: 1.05;
    }

    button:focus{
        outline-color: transparent;
    }
    button:focus-visible{
        box-shadow: 0 0 0 0.1em var(--light), 0 0 0 0.2em var(--bkg);
    }


    [data-size="sm"]{
        font-size: 0.8rem;
    }
    [data-size="md"]{
        font-size: 1.2rem;
    }
    [data-size="lg"]{
        font-size: 1.6rem;
    }
     
</style>