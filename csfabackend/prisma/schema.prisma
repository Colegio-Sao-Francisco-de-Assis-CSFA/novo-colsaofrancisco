// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @db.Char(36)
  userId            String  @db.Char(36)
  type              String  @db.VarChar(50)
  provider          String  @unique @db.VarChar(191)
  providerAccountId String  @unique @db.VarChar(191)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?    @db.Int
  token_type        String? @db.VarChar(50)
  scope             String? @db.VarChar(100)
  id_token          String? @db.Text
  session_state     String? @db.VarChar(100)

  user Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid()) @db.Char(36)
  sessionToken String   @unique @db.VarChar(191)
  userId       String   @db.Char(36)
  expires      DateTime

  user Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modelo de usuário
model Usuario {
  id            String    @id @default(cuid()) @db.Char(36)
  nome          String    @db.VarChar(120)
  email         String    @unique @db.VarChar(145)
  emailVerified DateTime?

  image String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  posts    Post[]
  questoes Questao[] // Relaciona o autor às questões criadas
  logs     Log[] // Relaciona o usuário aos logs que ele gerou
  accounts Account[]
  sessions Session[]

  setorId  String?  @db.Char(36) // Torna opcional para evitar erro
  setor    Setor?   @relation(fields: [setorId], references: [id])

}
model Setor {
  id       String   @id @default(cuid()) @db.Char(36)
  nome     String   @db.VarChar(100)
  usuarios Usuario[] // Relação inversa
}

model VerificationToken {
  identifier String   @unique @db.VarChar(191)
  token      String   @unique @db.VarChar(191)
  expires    DateTime
}

// Modelo de postagem (pode ser associada a questões ou provas)
model Post {
  id           String        @id @default(cuid()) @db.Char(25) // Identificador único
  titulo       String        @db.VarChar(100) // Título do post
  conteudo     String        @db.Text // Conteúdo do post
  imagem       String        @db.Text // URL da imagem de capa
  publicado    Boolean       @default(false) // Indica se o post está publicado
  categoria    CategoriaPost // Categoria do post
  autorId      String // Relacionado ao autor do post
  autor        Usuario       @relation(fields: [autorId], references: [id], onDelete: Cascade)
  tags         PostTag[] // Relação com as tags do post
  criadoEm     DateTime      @default(now()) // Data de criação
  atualizadoEm DateTime      @updatedAt // Data de última atualização
}

model TagPostagem {
  id    String    @id @default(cuid()) @db.Char(25) // ID único
  nome  String    @unique @db.VarChar(50) // Nome da tag
  posts PostTag[] // Relação com posts
}

model PostTag {
  postId String @db.Char(25)
  tagId  String @db.Char(25)

  post Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  TagPostagem @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId]) // Chave composta para garantir unicidade
}

// Atualização no modelo de Questão para incluir a relação com tags
model Questao {
  id            String      @id @default(cuid()) @db.Char(25)
  nome          String      @db.VarChar(100)
  enunciado     String      @db.Text
  image         String?     @db.Text
  category      Category    @default(CSFA)
  disciplina    Disciplina  @default(MATEMATICA)
  nivel         Nivel       @default(INICIAIS)
  ano           Ano         @default(PRIMEIRO)
  dificuldade   Dificuldade @default(FACIL)
  type          Type        @default(MULTIPLA)
  tempoEstimado Int?        @default(1)

  provas ProvaQuestao[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  autorId String?  @db.Char(25)
  autor   Usuario? @relation(fields: [autorId], references: [id], onDelete: SetNull)
}

// Modelo de provas
model Prova {
  id           String      @id @default(cuid()) @db.VarChar(25)
  nome         String      @db.VarChar(100)
  disciplina   Disciplina  @default(MATEMATICA)
  nivel        Nivel       @default(INICIAIS)
  ano          Ano         @default(PRIMEIRO)
  dificuldade  Dificuldade @default(FACIL)
  status       Status      @default(RASCUNHO)
  publishedAt  DateTime? // Data de publicação da prova
  duracaoTotal Int         @default(1) // Duração total da prova (em minutos)

  questoes ProvaQuestao[] // Relação com questões

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo intermediário para a relação de questões e provas
model ProvaQuestao {
  provaId   String  @db.VarChar(25)
  questaoId String  @db.VarChar(25)
  ordem     Int     @default(1)
  prova     Prova   @relation(fields: [provaId], references: [id])
  questao   Questao @relation(fields: [questaoId], references: [id])

  @@id([provaId, questaoId]) // Composite primary key
}

// Modelo de log para auditoria
model Log {
  id        String   @id @default(cuid()) @db.Char(25)
  action    Action // Tipo de ação (ex.: CREATED, UPDATED, DELETED)
  model     String // Nome do modelo afetado (ex.: Questao, Prova)
  modelId   String // ID do registro afetado
  userId    String?  @db.Char(25) // Quem realizou a ação
  createdAt DateTime @default(now()) // Data e hora do log

  usuario Usuario? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// Enums do sistema

enum Action {
  CREATED
  UPDATED
  DELETED
}

enum Status {
  PUBLICADA
  RASCUNHO
}

enum Type {
  MULTIPLA
  DISSERTATIVA
  VERDADEIRO_OU_FALSO
}

enum Disciplina {
  MATEMATICA
  PORTUGUES
  INGLES
  ESPANHOL
  FISICA
  QUIMICA
  HISTORIA
  GEOGRAFIA
  ARTE
  FILOSOFIA
  SOCIOLOGIA
  BIOLOGIA
  EDUCACAO_FISICA
}

enum Category {
  PUBLICA
  SAS
  CSFA
  PARTICULARES
  TREINAMENTO
}

enum Nivel {
  INICIAIS
  FINAIS
  MEDIO
}

enum Dificuldade {
  FACIL
  MEDIO
  DIFICIL
}

enum Ano {
  PRIMEIRO
  SEGUNDO
  TERCEIRO
  QUARTO
  QUINTO
  SEXTO
  SETIMO
  OITAVO
  NONO
}

enum CategoriaPost {
  NOTICIAS
  EVENTOS
  AVISOS
  ARTIGOS
  OUTROS
}
